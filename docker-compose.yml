version: '3.8'

services:
  # Nginx Web Server
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: yii2_nginx
    ports:
      - "80:80"        # Frontend
      - "81:81"        # Backend
      - "82:82"        # API
      - "443:443"      # HTTPS
    volumes:
      - ./api:/var/www/api:ro
      - ./backend:/var/www/backend:ro
      - ./frontend:/var/www/frontend:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ./docker/nginx/backend.conf:/etc/nginx/conf.d/backend.conf:ro
      - ./docker/nginx/frontend.conf:/etc/nginx/conf.d/frontend.conf:ro
      - nginx_logs:/var/log/nginx
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - php-fpm
    networks:
      - frontend_net
      - backend_net
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PHP-FPM 8.3
  php-fpm:
    build:
      context: ./docker/php-fpm
      dockerfile: Dockerfile
      args:
        PHP_VERSION: "8.3"
    container_name: yii2_php_fpm
    expose:
      - "9000"
    volumes:
      - ./api:/var/www/api:ro
      - ./backend:/var/www/backend:ro
      - ./frontend:/var/www/frontend:ro
      - ./common:/var/www/common:ro
      - ./console:/var/www/console:ro
      - ./migrations:/var/www/migrations:ro
      - ./vendor:/var/www/vendor:ro
      - ./composer.json:/var/www/composer.json:ro
      - ./composer.lock:/var/www/composer.lock:ro
      - ./docker/php-fpm/php.ini:/usr/local/etc/php/php.ini:ro
      - ./docker/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
      - ./docker/php-fpm/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf:ro
      - php_logs:/var/log/php-fpm
      - php_sessions:/var/www/sessions
    environment:
      - PHP_IDE_CONFIG=serverName=Production
      - XDEBUG_MODE=off
      - YII_ENV=prod
      - YII_DEBUG=0
    depends_on:
      pgsql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "cgi-fcgi -bind -connect 127.0.0.1:9000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL 15
  pgsql:
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
    container_name: yii2_pgsql
    expose:
      - "5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-yii2advanced}
      POSTGRES_USER: ${DB_USERNAME:-yii2}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - pgsql_data:/var/lib/postgresql/data
      - ./docker/postgresql/init:/docker-entrypoint-initdb.d:ro
      - pgsql_backups:/backups
    networks:
      - backend_net
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME:-yii2}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"

  # Redis 7
  redis:
    image: redis:7-alpine
    container_name: yii2_redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --save 60 1000
    networks:
      - backend_net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # RabbitMQ 3.12
  rabbitmq:
    build:
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    container_name: yii2_rabbitmq
    expose:
      - "5672"
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    networks:
      - backend_net
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus (Optional - Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: yii2_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend_net
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Optional - Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: yii2_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - backend_net
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge

volumes:
  pgsql_data:
    driver: local
  pgsql_backups:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  php_logs:
    driver: local
  php_sessions:
    driver: local
